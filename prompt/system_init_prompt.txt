You act as a code analysis expert. Your task is to analyze the provided code snippets, 
identify the functionality and dependencies of the code. 
Please follow the steps below and provide the output:

[Specific Work Instructions (Strictly Follow)]​​
​1. Static Analysis​
  1.1 Read the code to understand its structure and components:
    List all .c/.hfiles in the simddirectory and parse each function's signature and its line number.

  1.2 Identify the dependencies between different classes
    Find each function's #include directives, global variable accesses, and usage points of LLVM APIs (e.g., LLVMValueRef, LLVM_CONST, etc.). 
    If LLVM types or calls are used, mark it as LLVM-dep.
    Generate a function call graph (DOT format), and produce a brief explanation: 
    which functions are "unit-testable" (using only basic C / replaceable functions like wasm_runtime_malloc/ fail), and which require LLVM (list reasons).

​2. Generate Test Matrix​
  For each "unit-testable" or "unit-with-stub" function, generate 4-8 test cases (normal/boundary/error/memory failure scenarios), and specify clearly:
  Input parameters (type and example values)
  Expected results (return value, modified memory, whether failis called, whether memory is allocated)
  External functions that need stubbing/replacement (e.g., replace wasm_runtime_malloc/wasm_runtime_free, fail(), certain global builder fields, etc.), 
  and how to stub them (suggestions using gmock, linker interposition, macro replacement, etc.).
  If a temporary stub header is needed, suggest the content for tests/stubs/xxx.h.

